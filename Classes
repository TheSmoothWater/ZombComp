from __future__ import annotations
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import matplotlib as mpl
import numpy as np
import random
mpl.use('TkAgg')

class Point:
    def __init__(self, xcord: int, ycord: int) -> None:
        self.xcord: int = xcord
        self.ycord: int = ycord

    def change_location(self, location: tuple[int, int]) -> None:
        self.xcord: int = location[0]
        self.ycord: int = location[1]

    def get_location(self) -> tuple[int, int]:
        return self.xcord, self.ycord

    def colliding(self, other_point: Point) -> bool:
        return self.get_location() == other_point.get_location()

    def __str__(self) -> str:
        return f"x: {self.xcord}, y: {self.ycord}"


class Locomotory:
    def __init__(self):
        self.health = random.randint(1, 100)
        # Humans and zombies will spawn in separate places and humans shouldn't overlap
        self.point: Point = Point(0, 0)
        self.strength = random.randint(50, 100)
        self.walk_range: int = 5

    def walk(self, walk_values: tuple[int, int]) -> None:
        self.point.change_location(walk_values)

    def defend(self, creature: Locomotory) -> None:
        if self.health > 0:
            self.health -= creature.strength

    def is_dead(self) -> bool:
        if self.health <= 0:
            return True


class Susceptible(Locomotory):
    def __init__(self):
        super().__init__()
        self.health = random.randint(25, 50)
        self.strength = random.randint(10, 25)


class Infected(Locomotory):
    def __init__(self):
        super().__init__()
        self.health = random.randint(10, 25)
        self.strength = random.randint(10, 50)
        self.walk_range = 3


class Warrior(Susceptible):
    def __init__(self):
        super().__init__()
        self.health = random.randint(40, 75)
        self.strength = random.randint(20, 100)
        self.walk_range = 10


class Mutated(Infected):
    def __init__(self):
        super().__init__()
        self.health = random.randint(25, 80)
        self.strength = random.randint(30, 80)
        self.walk_range = 7


# starting
def simulation(grid_domain: int, grid_range: int,
               start_num_of_susceptible: int, start_num_of_infected: int) -> None:
    def inside_grid(creature: Locomotory) -> bool:
        return 0 <= creature.point.xcord <= grid_domain and 0 <= creature.point.ycord <= grid_range

    all_susceptible: list[Susceptible] = []
    starting_susceptible_locations: list[tuple[int, int]] = []
    all_infected: list[Infected] = []
    starting_infected_locations: list[tuple[int, int]] = []
    all_warriors: list[Warrior] = []
    all_mutated: list[Mutated] = []

    for i in range(start_num_of_susceptible):
        starting_location: tuple[int, int] = random.randint(0, grid_domain), random.randint(0, grid_domain // 5)
        while starting_location in starting_susceptible_locations:
            starting_location: tuple[int, int] = random.randint(0, grid_domain), random.randint(0, grid_domain // 5)
        starting_susceptible_locations.append(starting_location)
        all_susceptible.append(Susceptible())
        all_susceptible[-1].point.change_location(starting_location)

    for j in range(start_num_of_infected):
        starting_location: tuple[int, int] = random.randint(0, grid_domain), random.randint(grid_domain // 2,
                                                                                            grid_domain)
        while starting_location in starting_infected_locations:
            starting_location: tuple[int, int] = random.randint(0, grid_domain), random.randint(grid_domain // 2,
                                                                                                grid_domain)
        starting_infected_locations.append(starting_location)
        all_infected.append(Infected())
        all_infected[-1].point.change_location(starting_location)

    def simulate_turn(current_creature: Locomotory, enemy_list: list[Locomotory],
                      enemy_subclass_list: list[Locomotory]) -> None:
        def generate_random_walk() -> tuple[int, int]:
            current_creature_random_walk: tuple[int, int] = (random.randint(-1 * current_creature.walk_range,
                                                                            current_creature.walk_range),
                                                             random.randint(-1 * current_creature.walk_range,
                                                                            current_creature.walk_range))
            return current_creature_random_walk

        temporary_location: Point = current_creature.point
        current_creature.walk(generate_random_walk())
        while not inside_grid(current_creature):
            current_creature.point = temporary_location
            current_creature.walk(generate_random_walk())
        for enemy in enemy_list:
            if current_creature.point.colliding(enemy.point):
                current_creature.defend(enemy)
        for enemy in enemy_subclass_list:
            if current_creature.point.colliding(enemy.point):
                current_creature.defend(enemy)

    fig, ax = plt.subplots()

    x_axis = np.array([1, 2, 3, 4])
    artists: list = []
    colors: list = ['tab:green', 'tab:blue', 'tab:red', 'tab:orange',]

    while (len(all_susceptible) > 0 or len(all_warriors) > 0) and (len(all_infected) > 0 or len(all_mutated) > 0):
        for current_susceptible in all_susceptible:
            warrior_rate: int = random.randint(1, 1000)
            if current_susceptible.is_dead():
                temporary_location: Point = current_susceptible.point
                all_infected.append(Infected())
                all_infected[-1].point = temporary_location
                all_susceptible.remove(current_susceptible)
            else:
                simulate_turn(current_susceptible, all_infected, all_mutated)
            if warrior_rate < 101 and not current_susceptible.is_dead():
                temporary_location: Point = current_susceptible.point
                all_warriors.append(Warrior())
                all_warriors[-1].point = temporary_location
                all_susceptible.remove(current_susceptible)

        for current_warrior in all_warriors:
            if current_warrior.is_dead():
                all_warriors.remove(current_warrior)
                temporary_location: Point = current_warrior.point
                all_infected.append(Infected())
                all_infected[-1].point = temporary_location
            else:
                simulate_turn(current_warrior, all_infected, all_mutated)

        for current_infected in all_infected:
            mutation_rate: int = random.randint(1, 1000)
            if current_infected.is_dead():
                all_infected.remove(current_infected)
            else:
                simulate_turn(current_infected, all_susceptible, all_warriors)
            if mutation_rate < 101 and not current_infected.is_dead():
                temporary_location: Point = current_infected.point
                all_mutated.append(Mutated())
                all_mutated[-1].point = temporary_location
                all_infected.remove(current_infected)

        for current_mutated in all_mutated:
            if current_mutated.is_dead():
                all_mutated.remove(current_mutated)
            else:
                simulate_turn(current_mutated, all_susceptible, all_warriors)

        data = np.array([len(all_susceptible), len(all_warriors), len(all_infected), len(all_mutated)])
        container = ax.barh(x_axis, data, color=colors)
        artists.append(container)

    print(f'Number of susceptible: {len(all_susceptible)}, Number of infected : {len(all_infected)},'
          f' Number of warriors: {len(all_warriors)}, Number of mutated : {len(all_mutated)}')
    ani = animation.ArtistAnimation(fig=fig, artists=artists, interval=400)
    plt.show()

simulation(500, 500, 1000, 10)
